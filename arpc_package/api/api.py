# -*- coding: utf-8 -*-
# Generated by arpc-python at Tue Nov 22 22:55:30 2022
# Path: ./arpc_file/api/api.arpc
# package: api

import abc
from arpc.base import BaseAsync


class RequestV1(BaseAsync):
    """
    This class is a Param class for arpc.
    """

    def __init__(self, user_id):
        self.user_id = user_id


class ResponseV1(BaseAsync):
    """
    This class is a Param class for arpc.
    """

    def __init__(self, user_id, username):
        self.user_id = user_id
        self.username = username


async def get_func(function):
    async def func(request, _):
        req = await RequestV1.deserialize(request)
        response = await function(req)
        return await response.serialize()
    return func


class Arpc(metaclass=abc.ABCMeta):
    """
    This class is a Procedure class for arpc.
    """

    @abc.abstractmethod
    async def get_user_v1(self, request: RequestV1) -> ResponseV1: pass

    @abc.abstractmethod
    async def post_user_v1(self, request: ResponseV1) -> RequestV1: pass

    async def register(self, server):
        await server.register('arpc1.0', await get_func(self.get_user_v1))
        await server.register('arpc1.1', await get_func(self.post_user_v1))


class Client:

    def __init__(self, conn):
        self.conn = conn

    async def get_user_v1(self, request: RequestV1) -> ResponseV1:
        data = await request.serialize()
        res = await self.conn.handle('arpc1.0', data)
        return await ResponseV1.deserialize(res)

    async def post_user_v1(self, request: ResponseV1) -> RequestV1:
        data = await request.serialize()
        res = await self.conn.handle('arpc1.1', data)
        return await RequestV1.deserialize(res)


async def new_client(conn):
    return Client(conn)
