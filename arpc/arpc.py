import os
import re
import time
from typing import List

from .arpc_template import generate_param_class


PACKAGE = 'python'


def generate_package(arpc_meta, filename):
    path = './'
    # 解析生成路径
    if package := arpc_meta.get('package'):
        for pk in package:
            if pk['language'] == PACKAGE:
                path = pk['path']
    os.makedirs(path, exist_ok=True)
    file_name = os.path.splitext(os.path.basename(filename))[0]  # arpc 文件名
    python_file = os.path.join(path, f'{file_name}_arpc.py')  # 组合生成文件名

    localtime = time.asctime(time.localtime(time.time()))

    class_str = ""

    # 遍历生成 param 类
    for class_name, params in arpc_meta['param'].items():
        class_str += f"""\n{generate_param_class(class_name, params)}"""

    with open(python_file, 'w') as f:
        f.write(
            f'# This file is automatically generated, and it is not recommended to change it\n'
        )
        f.write(f'# Path: {python_file}\n')
        f.write(f'# Generated at [{localtime}]\n')
        f.write(f'\n')
        f.write(f'import arpc\n')
        f.write(class_str)
    return python_file


def compile_arpc(path: str) -> dict:
    if not os.path.exists(path):
        raise FileNotFoundError(f"File '{path}' does not exist")

    # if not path.endswith(".arpc"):
    #     raise FileNotFoundError(f"File '{path}' is not an .arpc file")

    arpc_meta = {}

    # 当前解析到的行号
    line_num = 0
    # 正在解析 package
    handle_package = False
    # 正在解析 procedure
    handle_procedures = False
    # 正在解析 param
    handle_param = False
    # 当前解析 param 名
    param_name = ''

    with open(path, 'r') as f:
        lines = f.readlines()
        for line in lines:
            line_num += 1
            # 去掉换行
            line = line.strip()
            # 去掉注释
            line = re.sub(r"//.*", "", line)
            # 去掉空行
            if not line:
                continue

            # 正在处理 package
            if handle_package:
                if line.startswith("}"):
                    handle_package = False
                    continue
                elif line.startswith("{"):
                    continue
                else:
                    # 正则匹配 language: path
                    match = re.match(r"(.*):\s*(.*)", line)
                    if not match:
                        raise Exception(
                            f"File [{path}]\n\tline [{line_num}]: Package definition error"
                        )
                    # 检查 package language 是否已定义
                    for package in arpc_meta['package']:
                        if package['language'] == match.group(1):
                            raise Exception(
                                f"File [{path}]\n\tline [{line_num}]: Repeated package: {match.group(1)}"
                            )
                    # 保存 package
                    arpc_meta['package'].append({
                        'language': match.group(1),
                        'path': match.group(2)
                    })
            # 正在处理 procedure
            elif handle_procedures:
                if line.startswith("}"):
                    handle_procedures = False
                    continue
                elif line.startswith("{"):
                    continue
                else:
                    # 正则匹配 procedure name(request): response
                    match = re.match(
                        r"procedure\s+(\w+)\s*\((\w+)\):\s*(\w+)", line)
                    if not match:
                        raise Exception(
                            f"File [{path}]\n\tline [{line_num}]: Procedure definition error"
                        )
                    # 检查 procedure 名称是否重复
                    for procedure in arpc_meta['procedures']:
                        if procedure['name'] == match.group(1):
                            raise Exception(
                                f"File [{path}]\n\tline [{line_num}]: Repeated procedure: {match.group(1)}"
                            )
                    # 保存 procedure
                    arpc_meta['procedures'].append({
                        'name': match.group(1),
                        'request': match.group(2),
                        'response': match.group(3)
                    })
                continue
            # 正在处理 param
            elif handle_param:
                if line.startswith("}"):
                    handle_param = False
                    continue
                elif line.startswith("{"):
                    continue
                else:
                    # 正则匹配 name: type = index
                    match = re.match(r"\s*(\w+):\s*(\w+)\s*=\s*(\d+)", line)
                    if not match:
                        raise Exception(
                            f"File [{path}]\n\tline [{line_num}]: Param definition error"
                        )
                    index = int(match.group(3))
                    # 检查 index 是否重复
                    for param in arpc_meta['param'][param_name]:
                        if param['index'] == index:
                            raise Exception(
                                f"File [{path}]\n\tline [{line_num}]: Repeated param index: {index}"
                            )
                    arpc_meta['param'][param_name].append({
                        'name': match.group(1),
                        'type': match.group(2),
                        'index': index
                    })
                continue
            else:
                if line.startswith("package"):
                    if 'package' in arpc_meta:
                        raise Exception(
                            f"File [{path}]\n\tline [{line_num}]: Repeated package area"
                        )
                    handle_package = True
                    arpc_meta['package'] = []  # 保存 package
                    continue
                elif line.startswith("procedures"):
                    if 'procedures' in arpc_meta:
                        raise Exception(
                            f"File [{path}]\n\tline [{line_num}]: Repeated procedures area"
                        )
                    handle_procedures = True
                    arpc_meta['procedures'] = []  # 保存 procedure
                    continue
                elif line.startswith("param"):
                    # 正则匹配 param RequestV1 {
                    match = re.match(r"param\s+(\w+) {", line)
                    if not match:
                        raise Exception(
                            f"File [{path}]\n\tline [{line_num}]: Param name definition error"
                        )
                    # 获取参数名
                    param_name = match.group(1)
                    if param_name in arpc_meta:
                        raise Exception(
                            f"File [{path}]\n\tline [{line_num}]: Repeated param: {param_name}"
                        )
                    handle_param = True
                    if 'param' not in arpc_meta:
                        arpc_meta['param'] = {}
                    arpc_meta['param'][param_name] = []  # 保存 param
                    continue
                elif line.startswith("arpc"):
                    # 正则匹配 "arpc: *"
                    result = re.match(r"arpc:\s*(.*)", line)
                    if result:
                        if 'version' in arpc_meta:
                            raise Exception(
                                f"File [{path}]\n\tline [{line_num}]: Repeated arpc line"
                            )
                        arpc_meta['version'] = result.group(1)
                else:
                    pass
    return arpc_meta


def run(path: str | List[str]):
    if isinstance(path, str):
        arpc = compile_arpc(path)
        result = generate_package(arpc, path)
        return result
    else:
        result = []
        for p in path:
            arpc = compile_arpc(p)
            result.append(generate_package(arpc, p))
        return result
